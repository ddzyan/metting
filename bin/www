#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('metting:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var certificate = fs.readFileSync('certs/mycert.pem', 'utf8');
var privateKey = fs.readFileSync('certs/mycert.key', 'utf8');
var socketClientInit = require('../socket_io/socketClient.js');
var models = require('../orm-sequelize').models;
var credentials = {
  key: privateKey,
  cert: certificate
};
var httpsServer = https.createServer(credentials, app);
var PORT = 4000;
var SSLPORT = 4001;


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */
models.sequelize.authenticate().then(function () {
  
})

var server = http.createServer(app);
httpsServer.listen(SSLPORT, function () {
  console.log('HTTPS Server is running on: https://localhost:%s', SSLPORT);
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log('HTTP Server is running on: http://localhost:%s', PORT);
});
server.on('error', onError);
server.on('listening', onListening);

socketClientInit(httpsServer);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}